<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>SSR Panel 2001</title>
<meta name="Microsoft Theme" content="indust 011, default">
<meta name="Microsoft Border" content="b, default">
</head>

<body background="_themes/indust/indtextb.jpg" bgcolor="#FFFFFF" text="#000000" link="#3366CC" vlink="#666666" alink="#996600"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top"><!--mstheme--><font face="Trebuchet MS, Arial, Helvetica">

<h1><!--mstheme--><font color="#000066">SSR Panel 2001<!--mstheme--></font></h1>
<h1><!--mstheme--><font color="#000066">Component Reuse Position Statement<!--mstheme--></font></h1>
<p>Steven Atkinson</p>
<p>MomsDesk Commerce Corporation</p>
<p><a href="http://www.momsdesk.com">www.momsdesk.com</a></p>
<p>steven@atkinson.net</p>
<p>&nbsp;</p>
<h2 align="left"><!--mstheme--><font color="#333399">Two Enablers for CBSE Reuse<!--mstheme--></font></h2>
<p>Increase development time/ decrease time to market</p>
<p>Language support for explicit component contracts</p>
<p>&nbsp;</p>
<h2><!--mstheme--><font color="#333399">Time to Develop&nbsp;&nbsp; <!--mstheme--></font></h2>
<p>When time to market has not necessarily been a factor, good reusable products
resulted:</p>
<p>&nbsp;&nbsp;&nbsp; - ACE (Doug Schmidt)</p>
<p>&nbsp;&nbsp;&nbsp; - util.concurrent (Doug Lea)</p>
<p>&nbsp;&nbsp;&nbsp; - RSA JSAFE security products</p>
<p>&nbsp;</p>
<h2><!--mstheme--><font color="#333399">Problem with Large Scale Reuse<!--mstheme--></font></h2>
<p>Reuse at Requirements (Large Scale) level provides many advantages to the
team.</p>
<p>Problem comes when translating reused requirements to code</p>
<p>1. Copy/paste syndrome</p>
<p>2. Mismatches/unchecked feedback loop syndrome</p>
<p>3. Casual Description syndrome (root cause)</p>
<h2><!--mstheme--><font color="#333399">&nbsp;<!--mstheme--></font></h2>
<h2><!--mstheme--><font color="#333399">Software Reuse Requires Component Understanding<!--mstheme--></font></h2>
<p>Languages today disguise or hide the information needed to reuse components</p>
<p>&nbsp;&nbsp;&nbsp; - non-functional behavior (e.g. resource consumption) is
often what is unknown and drives the NIH syndrome</p>
<p>&nbsp;&nbsp;&nbsp; - functional behavior documentation is typically
underspecified and/or out-of-date </p>
<p>&nbsp;</p>
<h2><!--mstheme--><font color="#333399">More Explicit CBSE Languages<!--mstheme--></font></h2>
<p>&nbsp;&nbsp;&nbsp; - cannot manufacture components to be reusable since much
is left implicit</p>
<p>&nbsp;&nbsp;&nbsp; - general idioms are not usually captured in libraries
well enough</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - time is not taken to document the
idioms</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - idioms captured are nebulous</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - usage becomes awkward (C++)</p>
<p>&nbsp;&nbsp;&nbsp; - need to explictly specify more about what a component
does</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - memory management and consumption</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - runtime data movement (stack/heap
manipulations, parameter passing)</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - thread safety / management</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - timing properties</p>
<p>&nbsp;&nbsp;&nbsp; Design by Contract principles are an example of more
explicit information.</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - enables reasoning and retrieval about
components.</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - iContract (Reliable Software Systems)</p>
<p>&nbsp;&nbsp;&nbsp; Regression test suites enable reuse by enabling
exploration of behavior</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; - JUnit (www.junit.org) </p>
<p>&nbsp;</p>
<h2><!--mstheme--><font color="#333399">Suggested Solutions<!--mstheme--></font></h2>
<p>Recurring basic language issues suggest:</p>
<p>&nbsp;&nbsp;&nbsp; - upgrade language tools and environment to support more
explicit documentation of components (e.g. JUnit, iContract)</p>
<p>&nbsp;&nbsp;&nbsp; - provide more education/training in more explicit coding
techniques</p>
<p>&nbsp;&nbsp;&nbsp; - make it more difficult to write &quot;good enough&quot;
software</p>

<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="Trebuchet MS, Arial, Helvetica">



<!--mstheme--></font></td></tr><!--msnavigation--></table></body>

</html>
